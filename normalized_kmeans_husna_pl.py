"""Normalized_Kmeans_husna_PL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AolJOtdFA3aqHIuC5GBLzzKjwl_ubRaJ
"""

import numpy as np
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import random
from sklearn.metrics import silhouette_score
from sklearn.cluster import AgglomerativeClustering
import pandas as pd
import os
from sklearn.metrics.pairwise import pairwise_distances

random.seed(42)
graphics_dir = 'graphics/'
if not os.path.exists(graphics_dir):
    os.makedirs(graphics_dir)

X = np.load('out/spectra_mat.npy')

# normalize spectra (0-1)
row_max = np.max(X, axis=1)
data_norm = X/row_max[:,np.newaxis]
# 306 rows in X are 0 so they lead to NaNs, replacing these with 0 
np.nan_to_num(data_norm ,0)
#assigning normalized data to X1 and multiplying by 10 just to make the visual clearer 
X1 = data_norm*10

# Sampling various number of clusters and extracting distortions:

distortions = []
max_clusters = 10
for i in range(max_clusters):
    km = KMeans(
        n_clusters = i + 1)
    km.fit(X1)
    distortions.append(km.inertia_)
    
# Elbow plot
plt.figure(figsize=(10,8))
plt.plot(np.arange(max_clusters) + 1, distortions, marker='x')
plt.suptitle('Elbow Plot', fontsize=24)
plt.xlabel('Number of clusters', fontsize=16)
plt.xticks(fontsize=14)
plt.ylabel('Distortion', fontsize=16)
plt.yticks(fontsize=14)
plt.savefig(graphics_dir + 'elbow.png')


# Fit the model with optimal number of clusters:
n_clusters = 8
km = KMeans(n_clusters=n_clusters)
km_mod1 = km.fit(X1)

# Creating the plots for each cluster:
for i in np.arange(n_clusters):
    cluster = X1[km_mod1.labels_ == i]
    plt.figure(figsize=(10,8))
    for j in range(cluster.shape[0]):
        plt.plot(np.arange(0,942), cluster[j])
    plt.plot(np.arange(0,942),km_mod1.cluster_centers_[i],  'r--',lw=4)
    plt.suptitle('cluster ' + str(i), fontsize=24)
    plt.xticks(fontsize=14)
    plt.yticks(fontsize=14)
    plt.savefig(graphics_dir + 'cluster_' + str(i) + '.png')


#################################################
# dissimilarity Matrices 
#################################################

cluster_2_4_mat = np.concatenate([
    X1[km_mod1.labels_ == 2],
    X1[km_mod1.labels_ == 4]
    ])

d1 = pairwise_distances(cluster_2_4_mat, metric='manhattan')
plt.figure()
plt.imshow(d1)
plt.title('City Block (L1)')
plt.colorbar()
plt.savefig(graphics_dir + 'dissimilarity_cluster_2_4.png')

for i in np.arange(n_clusters):
    for j in np.arange(n_clusters):
        if i >= j:
            continue
        if sum(km_mod1.labels_ == i) > 2000:
            continue
        if sum(km_mod1.labels_ == j) > 2000:
            continue

        clusters_mat = np.concatenate([
            X1[km_mod1.labels_ == i],
            X1[km_mod1.labels_ == j]
            ])

        d1 = pairwise_distances(clusters_mat, metric='manhattan')
        plt.figure()
        plt.imshow(d1)
        plt.title('City Block (L1) Cluster '\
                + str(i) + ' vs cluster ' + str(j))
        plt.colorbar()
        plt.savefig(graphics_dir + 'dissimilarity_cluster_' \
                + str(i) + '_' + str(j) + '.png')
